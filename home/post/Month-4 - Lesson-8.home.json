{
	"info": {
		"_postman_id": "54c8f88a-cdc2-4326-aba4-b499f96e4658",
		"name": "Month-4 | Lesson-8",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40691063"
	},
	"item": [
		{
			"name": "Homework",
			"item": [
				{
					"name": "All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Name</th>\r",
									"        <th>Price</th>\r",
									"        <th>Category</th>\r",
									"    </tr>\r",
									"    \r",
									"    {{#each response}}\r",
									"        <tr>\r",
									"            <td>{{id}}</td>\r",
									"            <td>{{name}}</td>\r",
									"            <td>{{price}}</td>\r",
									"            <td>{{category}}</td>\r",
									"        </tr>\r",
									"    {{/each}}\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4001/api/products",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4001/api/products/1",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Product by name of Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"errorChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"errorChart\");\r",
									"\r",
									"    var errorChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [\"404 Error\"],\r",
									"            datasets: [{\r",
									"                data: [1],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\", \"#58508d\", \"#bc5090\", \"#ff6361\", \"#ffa600\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            legend: { display: false },\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Error Count'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Error Types'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Count'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        errorChart.data.datasets[0].data = value.response.data;\r",
									"        errorChart.data.labels = value.response.labels;\r",
									"        errorChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var visualizerData = {\r",
									"        \r",
									"        // Labels take an array of strings\r",
									"        labels: [\"404 Error\"],\r",
									"        \r",
									"        // Data takes an array of numbers\r",
									"        data: [1]\r",
									"    };\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.title).to.exist;\r",
									"    pm.expect(responseData.errorMessage).to.exist;\r",
									"    pm.expect(responseData.link).to.exist.and.to.include(\"http://localhost:4001/products\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4001/api/products/category/tablet",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"products",
								"category",
								"tablet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Product",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4001/api/products/search?q=ipad air ",
							"host": [
								"localhost"
							],
							"port": "4001",
							"path": [
								"api",
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "ipad air "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "express",
			"item": [
				{
					"name": "All users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4000/users",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:4000/users/2",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add one user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 0,\r\n    \"username\": \"Mohinur\",\r\n    \"age\": 32\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:4000/user",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}